{"ast":null,"code":"// The `GSUB` table contains ligatures, among other things.\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\nimport check from '../check';\nimport { Parser } from '../parse';\nimport table from '../table';\nvar subtableParsers = new Array(9); // subtableParsers[0] is unused\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\n\nsubtableParsers[1] = function parseLookup1() {\n  var start = this.offset + this.relativeOffset;\n  var substFormat = this.parseUShort();\n\n  if (substFormat === 1) {\n    return {\n      substFormat: 1,\n      coverage: this.parsePointer(Parser.coverage),\n      deltaGlyphId: this.parseUShort()\n    };\n  } else if (substFormat === 2) {\n    return {\n      substFormat: 2,\n      coverage: this.parsePointer(Parser.coverage),\n      substitute: this.parseOffset16List()\n    };\n  }\n\n  check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\n\n\nsubtableParsers[2] = function parseLookup2() {\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n  return {\n    substFormat: substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    sequences: this.parseListOfLists()\n  };\n}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\n\n\nsubtableParsers[3] = function parseLookup3() {\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n  return {\n    substFormat: substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    alternateSets: this.parseListOfLists()\n  };\n}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\n\n\nsubtableParsers[4] = function parseLookup4() {\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n  return {\n    substFormat: substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    ligatureSets: this.parseListOfLists(function () {\n      return {\n        ligGlyph: this.parseUShort(),\n        components: this.parseUShortList(this.parseUShort() - 1)\n      };\n    })\n  };\n};\n\nvar lookupRecordDesc = {\n  sequenceIndex: Parser.uShort,\n  lookupListIndex: Parser.uShort\n}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\n\nsubtableParsers[5] = function parseLookup5() {\n  var start = this.offset + this.relativeOffset;\n  var substFormat = this.parseUShort();\n\n  if (substFormat === 1) {\n    return {\n      substFormat: substFormat,\n      coverage: this.parsePointer(Parser.coverage),\n      ruleSets: this.parseListOfLists(function () {\n        var glyphCount = this.parseUShort();\n        var substCount = this.parseUShort();\n        return {\n          input: this.parseUShortList(glyphCount - 1),\n          lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 2) {\n    return {\n      substFormat: substFormat,\n      coverage: this.parsePointer(Parser.coverage),\n      classDef: this.parsePointer(Parser.classDef),\n      classSets: this.parseListOfLists(function () {\n        var glyphCount = this.parseUShort();\n        var substCount = this.parseUShort();\n        return {\n          classes: this.parseUShortList(glyphCount - 1),\n          lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 3) {\n    var glyphCount = this.parseUShort();\n    var substCount = this.parseUShort();\n    return {\n      substFormat: substFormat,\n      coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n      lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n    };\n  }\n\n  check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\n\n\nsubtableParsers[6] = function parseLookup6() {\n  var start = this.offset + this.relativeOffset;\n  var substFormat = this.parseUShort();\n\n  if (substFormat === 1) {\n    return {\n      substFormat: 1,\n      coverage: this.parsePointer(Parser.coverage),\n      chainRuleSets: this.parseListOfLists(function () {\n        return {\n          backtrack: this.parseUShortList(),\n          input: this.parseUShortList(this.parseShort() - 1),\n          lookahead: this.parseUShortList(),\n          lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 2) {\n    return {\n      substFormat: 2,\n      coverage: this.parsePointer(Parser.coverage),\n      backtrackClassDef: this.parsePointer(Parser.classDef),\n      inputClassDef: this.parsePointer(Parser.classDef),\n      lookaheadClassDef: this.parsePointer(Parser.classDef),\n      chainClassSet: this.parseListOfLists(function () {\n        return {\n          backtrack: this.parseUShortList(),\n          input: this.parseUShortList(this.parseShort() - 1),\n          lookahead: this.parseUShortList(),\n          lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 3) {\n    return {\n      substFormat: 3,\n      backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n      inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n      lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n      lookupRecords: this.parseRecordList(lookupRecordDesc)\n    };\n  }\n\n  check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\n\n\nsubtableParsers[7] = function parseLookup7() {\n  // Extension Substitution subtable\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n  var extensionLookupType = this.parseUShort();\n  var extensionParser = new Parser(this.data, this.offset + this.parseULong());\n  return {\n    substFormat: 1,\n    lookupType: extensionLookupType,\n    extension: subtableParsers[extensionLookupType].call(extensionParser)\n  };\n}; // https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\n\n\nsubtableParsers[8] = function parseLookup8() {\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n  return {\n    substFormat: substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n    lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n    substitutes: this.parseUShortList()\n  };\n}; // https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\n\nfunction parseGsubTable(data, start) {\n  start = start || 0;\n  var p = new Parser(data, start);\n  var tableVersion = p.parseVersion(1);\n  check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');\n\n  if (tableVersion === 1) {\n    return {\n      version: tableVersion,\n      scripts: p.parseScriptList(),\n      features: p.parseFeatureList(),\n      lookups: p.parseLookupList(subtableParsers)\n    };\n  } else {\n    return {\n      version: tableVersion,\n      scripts: p.parseScriptList(),\n      features: p.parseFeatureList(),\n      lookups: p.parseLookupList(subtableParsers),\n      variations: p.parseFeatureVariationsList()\n    };\n  }\n} // GSUB Writing //////////////////////////////////////////////\n\n\nvar subtableMakers = new Array(9);\n\nsubtableMakers[1] = function makeLookup1(subtable) {\n  if (subtable.substFormat === 1) {\n    return new table.Table('substitutionTable', [{\n      name: 'substFormat',\n      type: 'USHORT',\n      value: 1\n    }, {\n      name: 'coverage',\n      type: 'TABLE',\n      value: new table.Coverage(subtable.coverage)\n    }, {\n      name: 'deltaGlyphID',\n      type: 'USHORT',\n      value: subtable.deltaGlyphId\n    }]);\n  } else {\n    return new table.Table('substitutionTable', [{\n      name: 'substFormat',\n      type: 'USHORT',\n      value: 2\n    }, {\n      name: 'coverage',\n      type: 'TABLE',\n      value: new table.Coverage(subtable.coverage)\n    }].concat(table.ushortList('substitute', subtable.substitute)));\n  }\n\n  check.fail('Lookup type 1 substFormat must be 1 or 2.');\n};\n\nsubtableMakers[3] = function makeLookup3(subtable) {\n  check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n  return new table.Table('substitutionTable', [{\n    name: 'substFormat',\n    type: 'USHORT',\n    value: 1\n  }, {\n    name: 'coverage',\n    type: 'TABLE',\n    value: new table.Coverage(subtable.coverage)\n  }].concat(table.tableList('altSet', subtable.alternateSets, function (alternateSet) {\n    return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));\n  })));\n};\n\nsubtableMakers[4] = function makeLookup4(subtable) {\n  check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n  return new table.Table('substitutionTable', [{\n    name: 'substFormat',\n    type: 'USHORT',\n    value: 1\n  }, {\n    name: 'coverage',\n    type: 'TABLE',\n    value: new table.Coverage(subtable.coverage)\n  }].concat(table.tableList('ligSet', subtable.ligatureSets, function (ligatureSet) {\n    return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function (ligature) {\n      return new table.Table('ligatureTable', [{\n        name: 'ligGlyph',\n        type: 'USHORT',\n        value: ligature.ligGlyph\n      }].concat(table.ushortList('component', ligature.components, ligature.components.length + 1)));\n    }));\n  })));\n};\n\nfunction makeGsubTable(gsub) {\n  return new table.Table('GSUB', [{\n    name: 'version',\n    type: 'ULONG',\n    value: 0x10000\n  }, {\n    name: 'scripts',\n    type: 'TABLE',\n    value: new table.ScriptList(gsub.scripts)\n  }, {\n    name: 'features',\n    type: 'TABLE',\n    value: new table.FeatureList(gsub.features)\n  }, {\n    name: 'lookups',\n    type: 'TABLE',\n    value: new table.LookupList(gsub.lookups, subtableMakers)\n  }]);\n}\n\nexport default {\n  parse: parseGsubTable,\n  make: makeGsubTable\n};","map":null,"metadata":{},"sourceType":"module"}