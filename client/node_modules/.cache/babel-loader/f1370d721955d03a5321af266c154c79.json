{"ast":null,"code":"import _regeneratorRuntime from \"/home/daniel/stuff/font-frog/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/daniel/stuff/font-frog/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/daniel/stuff/font-frog/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/daniel/stuff/font-frog/client/src/components/FileUpload.js\";\nimport React, { Fragment, useState } from \"react\";\nimport Message from \"./Message\";\nimport Progress from \"./Progress\";\nimport DisplayFont from \"./DisplayFont\";\nimport axios from \"axios\";\nimport \"./index.css\";\n\nvar FileUpload = function FileUpload() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      file = _useState2[0],\n      setFile = _useState2[1];\n\n  var _useState3 = useState(\"Choose File\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filename = _useState4[0],\n      setFilename = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      uploadedFile = _useState6[0],\n      setUploadedFile = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      message = _useState8[0],\n      setMessage = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      uploadPercentage = _useState10[0],\n      setUploadPercentage = _useState10[1];\n\n  var onChange = function onChange(e) {\n    setFile(e.target.files[0]);\n    setFilename(e.target.files[0].name);\n  };\n\n  var onSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e) {\n      var formData, res, _res$data, fileName, filePath;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              formData = new FormData();\n              formData.append(\"file\", file);\n              _context.prev = 3;\n              _context.next = 6;\n              return axios.post(\"/upload\", formData, {\n                headers: {\n                  \"Content-Type\": \"multipart/form-data\"\n                },\n                onUploadProgress: function onUploadProgress(progressEvent) {\n                  setUploadPercentage(parseInt(Math.round(progressEvent.loaded * 100 / progressEvent.total))); // Clear percentage\n\n                  setTimeout(function () {\n                    return setUploadPercentage(0);\n                  }, 10000);\n                }\n              });\n\n            case 6:\n              res = _context.sent;\n              _res$data = res.data, fileName = _res$data.fileName, filePath = _res$data.filePath;\n              setUploadedFile({\n                fileName: fileName,\n                filePath: filePath\n              });\n              setMessage(\"File Uploaded\");\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n\n              if (_context.t0.response.status === 500) {\n                setMessage(\"There was a problem with the server\");\n              } else {\n                setMessage(_context.t0.response.data.msg);\n              }\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 12]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, message ? React.createElement(Message, {\n    msg: message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }) : null, React.createElement(\"div\", {\n    className: \"drop-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dropArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Drag & drop your font file here!\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    action: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    for: \"upload\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Or upload your font manually\"), React.createElement(\"input\", {\n    type: \"file\",\n    id: \"upload\",\n    name: \"upload\",\n    onChange: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })))), React.createElement(DisplayFont, {\n    fontName: uploadedFile.filePath,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), uploadedFile ? React.createElement(\"div\", {\n    className: \"row mt-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-6 m-auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, uploadedFile.fileName))) : null);\n};\n\nexport default FileUpload;","map":{"version":3,"sources":["/home/daniel/stuff/font-frog/client/src/components/FileUpload.js"],"names":["React","Fragment","useState","Message","Progress","DisplayFont","axios","FileUpload","file","setFile","filename","setFilename","uploadedFile","setUploadedFile","message","setMessage","uploadPercentage","setUploadPercentage","onChange","e","target","files","name","onSubmit","preventDefault","formData","FormData","append","post","headers","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","setTimeout","res","data","fileName","filePath","response","status","msg"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport Message from \"./Message\";\nimport Progress from \"./Progress\";\nimport DisplayFont from \"./DisplayFont\";\nimport axios from \"axios\";\nimport \"./index.css\";\n\nconst FileUpload = () => {\n  const [file, setFile] = useState(\"\");\n  const [filename, setFilename] = useState(\"Choose File\");\n  const [uploadedFile, setUploadedFile] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [uploadPercentage, setUploadPercentage] = useState(0);\n\n  const onChange = e => {\n    setFile(e.target.files[0]);\n    setFilename(e.target.files[0].name);\n  };\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    try {\n      const res = await axios.post(\"/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        onUploadProgress: progressEvent => {\n          setUploadPercentage(parseInt(Math.round((progressEvent.loaded * 100) / progressEvent.total)));\n\n          // Clear percentage\n          setTimeout(() => setUploadPercentage(0), 10000);\n        }\n      });\n\n      const { fileName, filePath } = res.data;\n\n      setUploadedFile({ fileName, filePath });\n\n      setMessage(\"File Uploaded\");\n    } catch (err) {\n      if (err.response.status === 500) {\n        setMessage(\"There was a problem with the server\");\n      } else {\n        setMessage(err.response.data.msg);\n      }\n    }\n  };\n\n  return (\n    <Fragment>\n      {message ? <Message msg={message} /> : null}\n      <div className='drop-container'>\n        <div className='dropArea'>\n          <h1>Drag & drop your font file here!</h1>\n          <hr />\n          <form action=''>\n            <label for='upload'>Or upload your font manually</label>\n            <input type='file' id='upload' name='upload' onChange={onSubmit} />\n          </form>\n        </div>\n      </div>\n      <DisplayFont fontName={uploadedFile.filePath} />\n      {uploadedFile ? (\n        <div className='row mt-5'>\n          <div className='col-md-6 m-auto'>\n            <h3 className='text-center'>{uploadedFile.fileName}</h3>\n          </div>\n        </div>\n      ) : null}\n    </Fragment>\n  );\n};\n\nexport default FileUpload;\n"]},"metadata":{},"sourceType":"module"}