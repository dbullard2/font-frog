{"ast":null,"code":"// The `sfnt` wrapper provides organization for the tables in the font.\n// It is the top-level data structure in a font.\n// https://www.microsoft.com/typography/OTSPEC/otff.htm\n// Recommendations for creating OpenType Fonts:\n// http://www.microsoft.com/typography/otspec140/recom.htm\nimport check from '../check';\nimport table from '../table';\nimport cmap from './cmap';\nimport cff from './cff';\nimport head from './head';\nimport hhea from './hhea';\nimport hmtx from './hmtx';\nimport ltag from './ltag';\nimport maxp from './maxp';\nimport _name from './name';\nimport os2 from './os2';\nimport post from './post';\nimport gsub from './gsub';\nimport meta from './meta';\n\nfunction log2(v) {\n  return Math.log(v) / Math.log(2) | 0;\n}\n\nfunction computeCheckSum(bytes) {\n  while (bytes.length % 4 !== 0) {\n    bytes.push(0);\n  }\n\n  var sum = 0;\n\n  for (var i = 0; i < bytes.length; i += 4) {\n    sum += (bytes[i] << 24) + (bytes[i + 1] << 16) + (bytes[i + 2] << 8) + bytes[i + 3];\n  }\n\n  sum %= Math.pow(2, 32);\n  return sum;\n}\n\nfunction makeTableRecord(tag, checkSum, offset, length) {\n  return new table.Record('Table Record', [{\n    name: 'tag',\n    type: 'TAG',\n    value: tag !== undefined ? tag : ''\n  }, {\n    name: 'checkSum',\n    type: 'ULONG',\n    value: checkSum !== undefined ? checkSum : 0\n  }, {\n    name: 'offset',\n    type: 'ULONG',\n    value: offset !== undefined ? offset : 0\n  }, {\n    name: 'length',\n    type: 'ULONG',\n    value: length !== undefined ? length : 0\n  }]);\n}\n\nfunction makeSfntTable(tables) {\n  var sfnt = new table.Table('sfnt', [{\n    name: 'version',\n    type: 'TAG',\n    value: 'OTTO'\n  }, {\n    name: 'numTables',\n    type: 'USHORT',\n    value: 0\n  }, {\n    name: 'searchRange',\n    type: 'USHORT',\n    value: 0\n  }, {\n    name: 'entrySelector',\n    type: 'USHORT',\n    value: 0\n  }, {\n    name: 'rangeShift',\n    type: 'USHORT',\n    value: 0\n  }]);\n  sfnt.tables = tables;\n  sfnt.numTables = tables.length;\n  var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n  sfnt.searchRange = 16 * highestPowerOf2;\n  sfnt.entrySelector = log2(highestPowerOf2);\n  sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n  var recordFields = [];\n  var tableFields = [];\n  var offset = sfnt.sizeOf() + makeTableRecord().sizeOf() * sfnt.numTables;\n\n  while (offset % 4 !== 0) {\n    offset += 1;\n    tableFields.push({\n      name: 'padding',\n      type: 'BYTE',\n      value: 0\n    });\n  }\n\n  for (var i = 0; i < tables.length; i += 1) {\n    var t = tables[i];\n    check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');\n    var tableLength = t.sizeOf();\n    var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);\n    recordFields.push({\n      name: tableRecord.tag + ' Table Record',\n      type: 'RECORD',\n      value: tableRecord\n    });\n    tableFields.push({\n      name: t.tableName + ' table',\n      type: 'RECORD',\n      value: t\n    });\n    offset += tableLength;\n    check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');\n\n    while (offset % 4 !== 0) {\n      offset += 1;\n      tableFields.push({\n        name: 'padding',\n        type: 'BYTE',\n        value: 0\n      });\n    }\n  } // Table records need to be sorted alphabetically.\n\n\n  recordFields.sort(function (r1, r2) {\n    if (r1.value.tag > r2.value.tag) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  sfnt.fields = sfnt.fields.concat(recordFields);\n  sfnt.fields = sfnt.fields.concat(tableFields);\n  return sfnt;\n} // Get the metrics for a character. If the string has more than one character\n// this function returns metrics for the first available character.\n// You can provide optional fallback metrics if no characters are available.\n\n\nfunction metricsForChar(font, chars, notFoundMetrics) {\n  for (var i = 0; i < chars.length; i += 1) {\n    var glyphIndex = font.charToGlyphIndex(chars[i]);\n\n    if (glyphIndex > 0) {\n      var glyph = font.glyphs.get(glyphIndex);\n      return glyph.getMetrics();\n    }\n  }\n\n  return notFoundMetrics;\n}\n\nfunction average(vs) {\n  var sum = 0;\n\n  for (var i = 0; i < vs.length; i += 1) {\n    sum += vs[i];\n  }\n\n  return sum / vs.length;\n} // Convert the font object to a SFNT data structure.\n// This structure contains all the necessary tables and metadata to create a binary OTF file.\n\n\nfunction fontToSfntTable(font) {\n  var xMins = [];\n  var yMins = [];\n  var xMaxs = [];\n  var yMaxs = [];\n  var advanceWidths = [];\n  var leftSideBearings = [];\n  var rightSideBearings = [];\n  var firstCharIndex;\n  var lastCharIndex = 0;\n  var ulUnicodeRange1 = 0;\n  var ulUnicodeRange2 = 0;\n  var ulUnicodeRange3 = 0;\n  var ulUnicodeRange4 = 0;\n\n  for (var i = 0; i < font.glyphs.length; i += 1) {\n    var glyph = font.glyphs.get(i);\n    var unicode = glyph.unicode | 0;\n\n    if (isNaN(glyph.advanceWidth)) {\n      throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');\n    }\n\n    if (firstCharIndex > unicode || firstCharIndex === undefined) {\n      // ignore .notdef char\n      if (unicode > 0) {\n        firstCharIndex = unicode;\n      }\n    }\n\n    if (lastCharIndex < unicode) {\n      lastCharIndex = unicode;\n    }\n\n    var position = os2.getUnicodeRange(unicode);\n\n    if (position < 32) {\n      ulUnicodeRange1 |= 1 << position;\n    } else if (position < 64) {\n      ulUnicodeRange2 |= 1 << position - 32;\n    } else if (position < 96) {\n      ulUnicodeRange3 |= 1 << position - 64;\n    } else if (position < 123) {\n      ulUnicodeRange4 |= 1 << position - 96;\n    } else {\n      throw new Error('Unicode ranges bits > 123 are reserved for internal usage');\n    } // Skip non-important characters.\n\n\n    if (glyph.name === '.notdef') continue;\n    var metrics = glyph.getMetrics();\n    xMins.push(metrics.xMin);\n    yMins.push(metrics.yMin);\n    xMaxs.push(metrics.xMax);\n    yMaxs.push(metrics.yMax);\n    leftSideBearings.push(metrics.leftSideBearing);\n    rightSideBearings.push(metrics.rightSideBearing);\n    advanceWidths.push(glyph.advanceWidth);\n  }\n\n  var globals = {\n    xMin: Math.min.apply(null, xMins),\n    yMin: Math.min.apply(null, yMins),\n    xMax: Math.max.apply(null, xMaxs),\n    yMax: Math.max.apply(null, yMaxs),\n    advanceWidthMax: Math.max.apply(null, advanceWidths),\n    advanceWidthAvg: average(advanceWidths),\n    minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n    maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n    minRightSideBearing: Math.min.apply(null, rightSideBearings)\n  };\n  globals.ascender = font.ascender;\n  globals.descender = font.descender;\n  var headTable = head.make({\n    flags: 3,\n    // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n    unitsPerEm: font.unitsPerEm,\n    xMin: globals.xMin,\n    yMin: globals.yMin,\n    xMax: globals.xMax,\n    yMax: globals.yMax,\n    lowestRecPPEM: 3,\n    createdTimestamp: font.createdTimestamp\n  });\n  var hheaTable = hhea.make({\n    ascender: globals.ascender,\n    descender: globals.descender,\n    advanceWidthMax: globals.advanceWidthMax,\n    minLeftSideBearing: globals.minLeftSideBearing,\n    minRightSideBearing: globals.minRightSideBearing,\n    xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n    numberOfHMetrics: font.glyphs.length\n  });\n  var maxpTable = maxp.make(font.glyphs.length);\n  var os2Table = os2.make({\n    xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n    usWeightClass: font.tables.os2.usWeightClass,\n    usWidthClass: font.tables.os2.usWidthClass,\n    usFirstCharIndex: firstCharIndex,\n    usLastCharIndex: lastCharIndex,\n    ulUnicodeRange1: ulUnicodeRange1,\n    ulUnicodeRange2: ulUnicodeRange2,\n    ulUnicodeRange3: ulUnicodeRange3,\n    ulUnicodeRange4: ulUnicodeRange4,\n    fsSelection: font.tables.os2.fsSelection,\n    // REGULAR\n    // See http://typophile.com/node/13081 for more info on vertical metrics.\n    // We get metrics for typical characters (such as \"x\" for xHeight).\n    // We provide some fallback characters if characters are unavailable: their\n    // ordering was chosen experimentally.\n    sTypoAscender: globals.ascender,\n    sTypoDescender: globals.descender,\n    sTypoLineGap: 0,\n    usWinAscent: globals.yMax,\n    usWinDescent: Math.abs(globals.yMin),\n    ulCodePageRange1: 1,\n    // FIXME: hard-code Latin 1 support for now\n    sxHeight: metricsForChar(font, 'xyvw', {\n      yMax: Math.round(globals.ascender / 2)\n    }).yMax,\n    sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,\n    usDefaultChar: font.hasChar(' ') ? 32 : 0,\n    // Use space as the default character, if available.\n    usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.\n\n  });\n  var hmtxTable = hmtx.make(font.glyphs);\n  var cmapTable = cmap.make(font.glyphs);\n  var englishFamilyName = font.getEnglishName('fontFamily');\n  var englishStyleName = font.getEnglishName('fontSubfamily');\n  var englishFullName = englishFamilyName + ' ' + englishStyleName;\n  var postScriptName = font.getEnglishName('postScriptName');\n\n  if (!postScriptName) {\n    postScriptName = englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n  }\n\n  var names = {};\n\n  for (var n in font.names) {\n    names[n] = font.names[n];\n  }\n\n  if (!names.uniqueID) {\n    names.uniqueID = {\n      en: font.getEnglishName('manufacturer') + ':' + englishFullName\n    };\n  }\n\n  if (!names.postScriptName) {\n    names.postScriptName = {\n      en: postScriptName\n    };\n  }\n\n  if (!names.preferredFamily) {\n    names.preferredFamily = font.names.fontFamily;\n  }\n\n  if (!names.preferredSubfamily) {\n    names.preferredSubfamily = font.names.fontSubfamily;\n  }\n\n  var languageTags = [];\n\n  var nameTable = _name.make(names, languageTags);\n\n  var ltagTable = languageTags.length > 0 ? ltag.make(languageTags) : undefined;\n  var postTable = post.make();\n  var cffTable = cff.make(font.glyphs, {\n    version: font.getEnglishName('version'),\n    fullName: englishFullName,\n    familyName: englishFamilyName,\n    weightName: englishStyleName,\n    postScriptName: postScriptName,\n    unitsPerEm: font.unitsPerEm,\n    fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n  });\n  var metaTable = font.metas && Object.keys(font.metas).length > 0 ? meta.make(font.metas) : undefined; // The order does not matter because makeSfntTable() will sort them.\n\n  var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];\n\n  if (ltagTable) {\n    tables.push(ltagTable);\n  } // Optional tables\n\n\n  if (font.tables.gsub) {\n    tables.push(gsub.make(font.tables.gsub));\n  }\n\n  if (metaTable) {\n    tables.push(metaTable);\n  }\n\n  var sfntTable = makeSfntTable(tables); // Compute the font's checkSum and store it in head.checkSumAdjustment.\n\n  var bytes = sfntTable.encode();\n  var checkSum = computeCheckSum(bytes);\n  var tableFields = sfntTable.fields;\n  var checkSumAdjusted = false;\n\n  for (var _i = 0; _i < tableFields.length; _i += 1) {\n    if (tableFields[_i].name === 'head table') {\n      tableFields[_i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;\n      checkSumAdjusted = true;\n      break;\n    }\n  }\n\n  if (!checkSumAdjusted) {\n    throw new Error('Could not find head table with checkSum to adjust.');\n  }\n\n  return sfntTable;\n}\n\nexport default {\n  make: makeSfntTable,\n  fontToTable: fontToSfntTable,\n  computeCheckSum: computeCheckSum\n};","map":null,"metadata":{},"sourceType":"module"}