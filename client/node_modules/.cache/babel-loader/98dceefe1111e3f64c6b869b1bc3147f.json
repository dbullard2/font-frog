{"ast":null,"code":"// The `fvar` table stores font variation axes and instances.\n// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6fvar.html\nimport check from '../check';\nimport parse from '../parse';\nimport table from '../table';\n\nfunction addName(name, names) {\n  var nameString = JSON.stringify(name);\n  var nameID = 256;\n\n  for (var nameKey in names) {\n    var n = parseInt(nameKey);\n\n    if (!n || n < 256) {\n      continue;\n    }\n\n    if (JSON.stringify(names[nameKey]) === nameString) {\n      return n;\n    }\n\n    if (nameID <= n) {\n      nameID = n + 1;\n    }\n  }\n\n  names[nameID] = name;\n  return nameID;\n}\n\nfunction makeFvarAxis(n, axis, names) {\n  var nameID = addName(axis.name, names);\n  return [{\n    name: 'tag_' + n,\n    type: 'TAG',\n    value: axis.tag\n  }, {\n    name: 'minValue_' + n,\n    type: 'FIXED',\n    value: axis.minValue << 16\n  }, {\n    name: 'defaultValue_' + n,\n    type: 'FIXED',\n    value: axis.defaultValue << 16\n  }, {\n    name: 'maxValue_' + n,\n    type: 'FIXED',\n    value: axis.maxValue << 16\n  }, {\n    name: 'flags_' + n,\n    type: 'USHORT',\n    value: 0\n  }, {\n    name: 'nameID_' + n,\n    type: 'USHORT',\n    value: nameID\n  }];\n}\n\nfunction parseFvarAxis(data, start, names) {\n  var axis = {};\n  var p = new parse.Parser(data, start);\n  axis.tag = p.parseTag();\n  axis.minValue = p.parseFixed();\n  axis.defaultValue = p.parseFixed();\n  axis.maxValue = p.parseFixed();\n  p.skip('uShort', 1); // reserved for flags; no values defined\n\n  axis.name = names[p.parseUShort()] || {};\n  return axis;\n}\n\nfunction makeFvarInstance(n, inst, axes, names) {\n  var nameID = addName(inst.name, names);\n  var fields = [{\n    name: 'nameID_' + n,\n    type: 'USHORT',\n    value: nameID\n  }, {\n    name: 'flags_' + n,\n    type: 'USHORT',\n    value: 0\n  }];\n\n  for (var i = 0; i < axes.length; ++i) {\n    var axisTag = axes[i].tag;\n    fields.push({\n      name: 'axis_' + n + ' ' + axisTag,\n      type: 'FIXED',\n      value: inst.coordinates[axisTag] << 16\n    });\n  }\n\n  return fields;\n}\n\nfunction parseFvarInstance(data, start, axes, names) {\n  var inst = {};\n  var p = new parse.Parser(data, start);\n  inst.name = names[p.parseUShort()] || {};\n  p.skip('uShort', 1); // reserved for flags; no values defined\n\n  inst.coordinates = {};\n\n  for (var i = 0; i < axes.length; ++i) {\n    inst.coordinates[axes[i].tag] = p.parseFixed();\n  }\n\n  return inst;\n}\n\nfunction makeFvarTable(fvar, names) {\n  var result = new table.Table('fvar', [{\n    name: 'version',\n    type: 'ULONG',\n    value: 0x10000\n  }, {\n    name: 'offsetToData',\n    type: 'USHORT',\n    value: 0\n  }, {\n    name: 'countSizePairs',\n    type: 'USHORT',\n    value: 2\n  }, {\n    name: 'axisCount',\n    type: 'USHORT',\n    value: fvar.axes.length\n  }, {\n    name: 'axisSize',\n    type: 'USHORT',\n    value: 20\n  }, {\n    name: 'instanceCount',\n    type: 'USHORT',\n    value: fvar.instances.length\n  }, {\n    name: 'instanceSize',\n    type: 'USHORT',\n    value: 4 + fvar.axes.length * 4\n  }]);\n  result.offsetToData = result.sizeOf();\n\n  for (var i = 0; i < fvar.axes.length; i++) {\n    result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));\n  }\n\n  for (var j = 0; j < fvar.instances.length; j++) {\n    result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));\n  }\n\n  return result;\n}\n\nfunction parseFvarTable(data, start, names) {\n  var p = new parse.Parser(data, start);\n  var tableVersion = p.parseULong();\n  check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');\n  var offsetToData = p.parseOffset16(); // Skip countSizePairs.\n\n  p.skip('uShort', 1);\n  var axisCount = p.parseUShort();\n  var axisSize = p.parseUShort();\n  var instanceCount = p.parseUShort();\n  var instanceSize = p.parseUShort();\n  var axes = [];\n\n  for (var i = 0; i < axisCount; i++) {\n    axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n  }\n\n  var instances = [];\n  var instanceStart = start + offsetToData + axisCount * axisSize;\n\n  for (var j = 0; j < instanceCount; j++) {\n    instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n  }\n\n  return {\n    axes: axes,\n    instances: instances\n  };\n}\n\nexport default {\n  make: makeFvarTable,\n  parse: parseFvarTable\n};","map":null,"metadata":{},"sourceType":"module"}