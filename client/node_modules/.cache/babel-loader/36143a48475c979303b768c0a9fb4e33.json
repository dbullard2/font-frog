{"ast":null,"code":"// The `loca` table stores the offsets to the locations of the glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/loca.htm\nimport parse from '../parse'; // Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\n\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n  var p = new parse.Parser(data, start);\n  var parseFn = shortVersion ? p.parseUShort : p.parseULong; // There is an extra entry after the last index element to compute the length of the last glyph.\n  // That's why we use numGlyphs + 1.\n\n  var glyphOffsets = [];\n\n  for (var i = 0; i < numGlyphs + 1; i += 1) {\n    var glyphOffset = parseFn.call(p);\n\n    if (shortVersion) {\n      // The short table version stores the actual offset divided by 2.\n      glyphOffset *= 2;\n    }\n\n    glyphOffsets.push(glyphOffset);\n  }\n\n  return glyphOffsets;\n}\n\nexport default {\n  parse: parseLocaTable\n};","map":null,"metadata":{},"sourceType":"module"}