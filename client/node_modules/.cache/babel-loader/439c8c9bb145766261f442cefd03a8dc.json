{"ast":null,"code":"var _jsxFileName = \"/home/daniel/stuff/font-frog/client/src/components/DisplayFont.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as opentype from \"opentype.js\";\nimport \"./index.css\";\n\nvar DisplayFont = function DisplayFont(_ref) {\n  var fontName = _ref.fontName;\n  var font = {\n    fontName: fontName\n  };\n  font = JSON.stringify(font);\n  font = font.slice(13, -2);\n  console.log(font);\n  opentype.load(font, function (err, font) {\n    if (err) {\n      console.log(\"font couldnt be loaded\");\n    } else {\n      var ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n      var text = \"Woven silk pyjamas exchanged for blue quartz.\";\n      var test = document.getElementById(\"slider\").value;\n      font.draw(ctx, text, 0, 50, test);\n    }\n  });\n\n  var reloadFont = function reloadFont(e) {\n    opentype.load(font, function (err, font) {\n      if (err) {\n        console.log(\"font couldnt be loaded\");\n      } else {\n        var ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n        var text = \"Woven silk pyjamas exchanged for blue quartz.\";\n        var test = document.getElementById(\"slider\").value;\n        font.draw(ctx, text, 0, 50, test);\n      }\n    });\n  };\n\n  var sliderVal = function sliderVal(e) {\n    document.getElementById(\"fontSize\").innerHTML = document.getElementById(\"slider\").value;\n    reloadFont();\n  };\n\n  var sampleText = function sampleText(e) {\n    var inputBox = document.getElementById(\"input\");\n    document.getElementById(\"output\").value = inputBox.value;\n    var sampleTextVal = inputBox.value;\n    console.log(sampleTextVal);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    id: \"canvas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"range\",\n    name: \"\",\n    id: \"slider\",\n    onChange: sliderVal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    id: \"fontSize\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"input\",\n    onChange: sampleText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"output\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n};\n\nDisplayFont.propTypes = {\n  fontName: PropTypes.string\n};\nexport default DisplayFont;","map":{"version":3,"sources":["/home/daniel/stuff/font-frog/client/src/components/DisplayFont.js"],"names":["React","PropTypes","opentype","DisplayFont","fontName","font","JSON","stringify","slice","console","log","load","err","ctx","document","getElementById","getContext","text","test","value","draw","reloadFont","e","sliderVal","innerHTML","sampleText","inputBox","sampleTextVal","propTypes","string"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as opentype from \"opentype.js\";\nimport \"./index.css\";\n\nconst DisplayFont = ({ fontName }) => {\n  var font = { fontName };\n  font = JSON.stringify(font);\n  font = font.slice(13, -2);\n  console.log(font);\n  opentype.load(font, function(err, font) {\n    if (err) {\n      console.log(\"font couldnt be loaded\");\n    } else {\n      var ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n      var text = \"Woven silk pyjamas exchanged for blue quartz.\";\n      var test = document.getElementById(\"slider\").value;\n      font.draw(ctx, text, 0, 50, test);\n    }\n  });\n\n  const reloadFont = e => {\n    opentype.load(font, function(err, font) {\n      if (err) {\n        console.log(\"font couldnt be loaded\");\n      } else {\n        var ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n        var text = \"Woven silk pyjamas exchanged for blue quartz.\";\n        var test = document.getElementById(\"slider\").value;\n\n        font.draw(ctx, text, 0, 50, test);\n      }\n    });\n  };\n\n  const sliderVal = e => {\n    document.getElementById(\"fontSize\").innerHTML = document.getElementById(\"slider\").value;\n    reloadFont();\n  };\n\n  const sampleText = e => {\n    var inputBox = document.getElementById(\"input\");\n    document.getElementById(\"output\").value = inputBox.value;\n    var sampleTextVal = inputBox.value;\n    console.log(sampleTextVal);\n  };\n\n  return (\n    <div>\n      <canvas id='canvas'></canvas>\n      <input type='range' name='' id='slider' onChange={sliderVal} />\n      <p id='fontSize'></p>\n      <input type='text' id='input' onChange={sampleText} />\n      <input type='text' id='output' disabled />\n    </div>\n  );\n};\n\nDisplayFont.propTypes = {\n  fontName: PropTypes.string\n};\n\nexport default DisplayFont;\n"]},"metadata":{},"sourceType":"module"}