{"ast":null,"code":"// The Substitution object provides utility methods to manipulate\n// the GSUB substitution table.\nimport check from './check';\nimport Layout from './layout';\n/**\n * @exports opentype.Substitution\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\n\nfunction Substitution(font) {\n  Layout.call(this, font, 'gsub');\n} // Check if 2 arrays of primitives are equal.\n\n\nfunction arraysEqual(ar1, ar2) {\n  var n = ar1.length;\n\n  if (n !== ar2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < n; i++) {\n    if (ar1[i] !== ar2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n} // Find the first subtable of a lookup table in a particular format.\n\n\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n  var subtables = lookupTable.subtables;\n\n  for (var i = 0; i < subtables.length; i++) {\n    var subtable = subtables[i];\n\n    if (subtable.substFormat === format) {\n      return subtable;\n    }\n  }\n\n  if (defaultSubtable) {\n    subtables.push(defaultSubtable);\n    return defaultSubtable;\n  }\n\n  return undefined;\n}\n\nSubstitution.prototype = Layout.prototype;\n/**\n * Create a default GSUB table.\n * @return {Object} gsub - The GSUB table.\n */\n\nSubstitution.prototype.createDefaultTable = function () {\n  // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n  return {\n    version: 1,\n    scripts: [{\n      tag: 'DFLT',\n      script: {\n        defaultLangSys: {\n          reserved: 0,\n          reqFeatureIndex: 0xffff,\n          featureIndexes: []\n        },\n        langSysRecords: []\n      }\n    }],\n    features: [],\n    lookups: []\n  };\n};\n/**\n * List all single substitutions (lookup type 1) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n * @return {Array} substitutions - The list of substitutions.\n */\n\n\nSubstitution.prototype.getSingle = function (feature, script, language) {\n  var substitutions = [];\n  var lookupTables = this.getLookupTables(script, language, feature, 1);\n\n  for (var idx = 0; idx < lookupTables.length; idx++) {\n    var subtables = lookupTables[idx].subtables;\n\n    for (var i = 0; i < subtables.length; i++) {\n      var subtable = subtables[i];\n      var glyphs = this.expandCoverage(subtable.coverage);\n      var j = void 0;\n\n      if (subtable.substFormat === 1) {\n        var delta = subtable.deltaGlyphId;\n\n        for (j = 0; j < glyphs.length; j++) {\n          var glyph = glyphs[j];\n          substitutions.push({\n            sub: glyph,\n            by: glyph + delta\n          });\n        }\n      } else {\n        var substitute = subtable.substitute;\n\n        for (j = 0; j < glyphs.length; j++) {\n          substitutions.push({\n            sub: glyphs[j],\n            by: substitute[j]\n          });\n        }\n      }\n    }\n  }\n\n  return substitutions;\n};\n/**\n * List all alternates (lookup type 3) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n * @return {Array} alternates - The list of alternates\n */\n\n\nSubstitution.prototype.getAlternates = function (feature, script, language) {\n  var alternates = [];\n  var lookupTables = this.getLookupTables(script, language, feature, 3);\n\n  for (var idx = 0; idx < lookupTables.length; idx++) {\n    var subtables = lookupTables[idx].subtables;\n\n    for (var i = 0; i < subtables.length; i++) {\n      var subtable = subtables[i];\n      var glyphs = this.expandCoverage(subtable.coverage);\n      var alternateSets = subtable.alternateSets;\n\n      for (var j = 0; j < glyphs.length; j++) {\n        alternates.push({\n          sub: glyphs[j],\n          by: alternateSets[j]\n        });\n      }\n    }\n  }\n\n  return alternates;\n};\n/**\n * List all ligatures (lookup type 4) for a given script, language, and feature.\n * The result is an array of ligature objects like { sub: [ids], by: id }\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} ligatures - The list of ligatures.\n */\n\n\nSubstitution.prototype.getLigatures = function (feature, script, language) {\n  var ligatures = [];\n  var lookupTables = this.getLookupTables(script, language, feature, 4);\n\n  for (var idx = 0; idx < lookupTables.length; idx++) {\n    var subtables = lookupTables[idx].subtables;\n\n    for (var i = 0; i < subtables.length; i++) {\n      var subtable = subtables[i];\n      var glyphs = this.expandCoverage(subtable.coverage);\n      var ligatureSets = subtable.ligatureSets;\n\n      for (var j = 0; j < glyphs.length; j++) {\n        var startGlyph = glyphs[j];\n        var ligSet = ligatureSets[j];\n\n        for (var k = 0; k < ligSet.length; k++) {\n          var lig = ligSet[k];\n          ligatures.push({\n            sub: [startGlyph].concat(lig.components),\n            by: lig.ligGlyph\n          });\n        }\n      }\n    }\n  }\n\n  return ligatures;\n};\n/**\n * Add or modify a single substitution (lookup type 1)\n * Format 2, more flexible, is always used.\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\n\n\nSubstitution.prototype.addSingle = function (feature, substitution, script, language) {\n  var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n  var subtable = getSubstFormat(lookupTable, 2, {\n    // lookup type 1 subtable, format 2, coverage format 1\n    substFormat: 2,\n    coverage: {\n      format: 1,\n      glyphs: []\n    },\n    substitute: []\n  });\n  check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n  var coverageGlyph = substitution.sub;\n  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\n  if (pos < 0) {\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.substitute.splice(pos, 0, 0);\n  }\n\n  subtable.substitute[pos] = substitution.by;\n};\n/**\n * Add or modify an alternate substitution (lookup type 1)\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: [ids] }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\n\n\nSubstitution.prototype.addAlternate = function (feature, substitution, script, language) {\n  var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n  var subtable = getSubstFormat(lookupTable, 1, {\n    // lookup type 3 subtable, format 1, coverage format 1\n    substFormat: 1,\n    coverage: {\n      format: 1,\n      glyphs: []\n    },\n    alternateSets: []\n  });\n  check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n  var coverageGlyph = substitution.sub;\n  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\n  if (pos < 0) {\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.alternateSets.splice(pos, 0, 0);\n  }\n\n  subtable.alternateSets[pos] = substitution.by;\n};\n/**\n * Add a ligature (lookup type 4)\n * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} ligature - { sub: [ids], by: id }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\n\n\nSubstitution.prototype.addLigature = function (feature, ligature, script, language) {\n  var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n  var subtable = lookupTable.subtables[0];\n\n  if (!subtable) {\n    subtable = {\n      // lookup type 4 subtable, format 1, coverage format 1\n      substFormat: 1,\n      coverage: {\n        format: 1,\n        glyphs: []\n      },\n      ligatureSets: []\n    };\n    lookupTable.subtables[0] = subtable;\n  }\n\n  check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n  var coverageGlyph = ligature.sub[0];\n  var ligComponents = ligature.sub.slice(1);\n  var ligatureTable = {\n    ligGlyph: ligature.by,\n    components: ligComponents\n  };\n  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\n  if (pos >= 0) {\n    // ligatureSet already exists\n    var ligatureSet = subtable.ligatureSets[pos];\n\n    for (var i = 0; i < ligatureSet.length; i++) {\n      // If ligature already exists, return.\n      if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n        return;\n      }\n    } // ligature does not exist: add it.\n\n\n    ligatureSet.push(ligatureTable);\n  } else {\n    // Create a new ligatureSet and add coverage for the first glyph.\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n  }\n};\n/**\n * List all feature data for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} substitutions - The list of substitutions.\n */\n\n\nSubstitution.prototype.getFeature = function (feature, script, language) {\n  if (/ss\\d\\d/.test(feature)) {\n    // ss01 - ss20\n    return this.getSingle(feature, script, language);\n  }\n\n  switch (feature) {\n    case 'aalt':\n    case 'salt':\n      return this.getSingle(feature, script, language).concat(this.getAlternates(feature, script, language));\n\n    case 'dlig':\n    case 'liga':\n    case 'rlig':\n      return this.getLigatures(feature, script, language);\n  }\n\n  return undefined;\n};\n/**\n * Add a substitution to a feature for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\n\n\nSubstitution.prototype.add = function (feature, sub, script, language) {\n  if (/ss\\d\\d/.test(feature)) {\n    // ss01 - ss20\n    return this.addSingle(feature, sub, script, language);\n  }\n\n  switch (feature) {\n    case 'aalt':\n    case 'salt':\n      if (typeof sub.by === 'number') {\n        return this.addSingle(feature, sub, script, language);\n      }\n\n      return this.addAlternate(feature, sub, script, language);\n\n    case 'dlig':\n    case 'liga':\n    case 'rlig':\n      return this.addLigature(feature, sub, script, language);\n  }\n\n  return undefined;\n};\n\nexport default Substitution;","map":null,"metadata":{},"sourceType":"module"}